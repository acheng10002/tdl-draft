/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/config.js":
/*!***********************!*\
  !*** ./src/config.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Project1: () => (/* binding */ Project1),\n/* harmony export */   Project2: () => (/* binding */ Project2),\n/* harmony export */   Project3: () => (/* binding */ Project3),\n/* harmony export */   Project4: () => (/* binding */ Project4),\n/* harmony export */   Project5: () => (/* binding */ Project5),\n/* harmony export */   buttons: () => (/* binding */ buttons),\n/* harmony export */   firstThreeTaskFields: () => (/* binding */ firstThreeTaskFields),\n/* harmony export */   newProjectFieldAttributes: () => (/* binding */ newProjectFieldAttributes),\n/* harmony export */   priorityTaskField: () => (/* binding */ priorityTaskField),\n/* harmony export */   priorityTaskFieldLabel: () => (/* binding */ priorityTaskFieldLabel),\n/* harmony export */   projectMapping: () => (/* binding */ projectMapping),\n/* harmony export */   projectsListAttributes: () => (/* binding */ projectsListAttributes),\n/* harmony export */   projectsListText: () => (/* binding */ projectsListText),\n/* harmony export */   statusTaskField: () => (/* binding */ statusTaskField),\n/* harmony export */   titles: () => (/* binding */ titles)\n/* harmony export */ });\nconst projectsListText = {\n    p1: \"Project 1\",\n    p2: \"Project 2\",\n    p3: \"Project 3\",\n    p4: \"Project 4\",\n    p5: \"Project 5\",\n}\n\n\nconst titles = {\n    'projects-title': {\n        position: \"left\",\n        image: \"./img/folders-multiple.svg\",\n        alt: \"multiple folders icon\",\n        'text-class': \"projects-title-text\",\n        text: \"Projects\"\n\n    },\n    'each-task-title': {\n        position: \"right\",\n        image: \"./img/calendar-check.svg\",\n        alt: \"calendar with check mark icon\",\n        text: \"Task\"\n    }\n}\n\n\nconst buttons = {\n    'new-project': {\n        position: \"left\",\n        id: \"new-project\",\n        text: \"+ New Project\"\n    },\n    'delete-project': {\n        position: \"left\",\n        id: \"delete-project\",\n        text: \"Delete Project\"\n    },\n    'new-task': {\n        position: \"middle\",\n        id: \"new-task\",\n        text: \"+ New Task\"\n    },\n    'save-task': {\n        position: \"right\",\n        id: \"save-task\",\n        text: \"Save\"\n    },\n    'delete-task': {\n        position: \"right\",\n        id: \"delete-task\",\n        text: \"Delete Task\"\n    }\n}\n\n\nconst projectsListAttributes =  {\n    image: \"./img/arrow-right.svg\",\n    alt: \"arrow pointing right\"\n}\n \n\nconst newProjectFieldAttributes = {\n    for: \"add-new-project\",\n    type: \"text\",\n    id: \"add-new-project\",\n    placeholder: \"+ New Project\"\n}\n\n\nconst Project1 = {\n    'Project': {\n        position: \"middle\",\n        image: \"./img/folder-arrow-down.svg\",\n        alt: \"arrow pointing right icon\",\n        text: \"Project 1\"\n    },\n    '0': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 1 Title\",\n        'task-description': \"Diam maecenas ultricies mi eget mauris pharetra et. Aliquam vestibulum morbi blandit cursus risus at ultrices.\",\n        'task-duedate': \"12/06/2023\",\n        'priority-level': \"high\",\n        'status': \"In Progress\"\n    },\n    '1': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 2 Title\",\n        'task-description': \"In fermentum et sollicitudin ac orci phasellus. Risus feugiat in ante metus dictum.\",\n        'task-duedate': \"12/15/2023\",\n        'priority-level': \"medium\",\n        'status': \"Complete\"\n    },\n    '2': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 3 Title\",\n        'task-description': \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n        'task-duedate': \"12/18/2023\",\n        'priority-level': \"medium\",\n        'status': \"In Progress\"\n    },\n    '3': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 4 Title\",\n        'task-description': \"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\",\n        'task-duedate': \"01/04/2024\",\n        'priority-level': \"low\",\n        'status': \"Not Started\"\n    }\n}\n\n\nconst Project2 = {\n    'Project': {\n        position: \"middle\",\n        image: \"./img/folder-arrow-down.svg\",\n        alt: \"arrow pointing right icon\",\n        text: \"Project 2\"\n    },\n    '0': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 1 Title\",\n        'task-description': \"Diam maecenas ultricies mi eget mauris pharetra et. Aliquam vestibulum morbi blandit cursus risus at ultrices.\",\n        'task-duedate': \"12/06/2023\",\n        'priority-level': \"high\",\n        'status': \"In Progress\"\n    },\n    '1': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 2 Title\",\n        'task-description': \"In fermentum et sollicitudin ac orci phasellus. Risus feugiat in ante metus dictum.\",\n        'task-duedate': \"12/15/2023\",\n        'priority-level': \"medium\",\n        'status': \"Complete\"\n    }\n}\n\n\nconst Project3 = {\n    'Project': {\n        position: \"middle\",\n        image: \"./img/folder-arrow-down.svg\",\n        alt: \"arrow pointing right icon\",\n        text: \"Project 3\"\n    },\n    '0': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 1 Title\",\n        'task-description': \"Diam maecenas ultricies mi eget mauris pharetra et. Aliquam vestibulum morbi blandit cursus risus at ultrices.\",\n        'task-duedate': \"12/06/2023\",\n        'priority-level': \"high\",\n        'status': \"In Progress\"\n    },\n    '1': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 2 Title\",\n        'task-description': \"In fermentum et sollicitudin ac orci phasellus. Risus feugiat in ante metus dictum.\",\n        'task-duedate': \"12/15/2023\",\n        'priority-level': \"medium\",\n        'status': \"Complete\"\n    },\n    '2': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 3 Title\",\n        'task-description': \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n        'task-duedate': \"12/18/2023\",\n        'priority-level': \"medium\",\n        'status': \"In Progress\"\n    },\n    '3': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 4 Title\",\n        'task-description': \"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\",\n        'task-duedate': \"01/04/2024\",\n        'priority-level': \"low\",\n        'status': \"Not Started\"\n    }\n}\n\n\nconst Project4 = {\n    'Project': {\n        position: \"middle\",\n        image: \"./img/folder-arrow-down.svg\",\n        alt: \"arrow pointing right icon\",\n        text: \"Project 4\"\n    },\n    '0': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 1 Title\",\n        'task-description': \"Diam maecenas ultricies mi eget mauris pharetra et. Aliquam vestibulum morbi blandit cursus risus at ultrices.\",\n        'task-duedate': \"12/06/2023\",\n        'priority-level': \"high\",\n        'status': \"In Progress\"\n    },\n    '1': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 2 Title\",\n        'task-description': \"In fermentum et sollicitudin ac orci phasellus. Risus feugiat in ante metus dictum.\",\n        'task-duedate': \"12/15/2023\",\n        'priority-level': \"medium\",\n        'status': \"Complete\"\n    },\n    '2': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 3 Title\",\n        'task-description': \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n        'task-duedate': \"12/18/2023\",\n        'priority-level': \"medium\",\n        'status': \"In Progress\"\n    },\n    '3': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 4 Title\",\n        'task-description': \"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\",\n        'task-duedate': \"01/04/2024\",\n        'priority-level': \"low\",\n        'status': \"Not Started\"\n    },\n    '4': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 5 Title\",\n        'task-description': \"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\",\n        'task-duedate': \"01/17/2024\",\n        'priority-level': \"high\",\n        'status': \"In Progress\"\n    }\n}\n\n\nconst Project5 = {\n    'Project': {\n        position: \"middle\",\n        image: \"./img/folder-arrow-down.svg\",\n        alt: \"arrow pointing right icon\",\n        text: \"Project 5\"\n    },\n    '0': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 1 Title\",\n        'task-description': \"Diam maecenas ultricies mi eget mauris pharetra et. Aliquam vestibulum morbi blandit cursus risus at ultrices.\",\n        'task-duedate': \"12/06/2023\",\n        'priority-level': \"high\",\n        'status': \"In Progress\"\n    }\n}\n\n\nconst projectMapping = {\n    Project1: Project1,\n    Project2: Project2,\n    Project3: Project3,\n    Project4: Project4,\n    Project5: Project5,\n}\n\n\nconst firstThreeTaskFields = {\n    'task-field': {\n        for: \"each-task\",\n        'label-id': \"each-task-label\",\n        'label-text': \"Task Title:\",\n        type: \"text\",\n        'input-id': \"each-task\"\n    },\n    'duedate-field': {\n        for: \"task-duedate\",\n        'label-id': \"task-duedate-label\",\n        'label-text': \"Task Due Date:\",\n        type: \"date\",\n        'input-id': \"task-duedate\"\n\n    },\n    'description-field': {\n        for: \"task-description\",\n        'label-id': \"task-description-label\",\n        'label-text': \"Task Description:\",\n        name: \"task-textarea\",\n        'textarea-id': \"task-description\"\n    }\n}\n\n\nconst priorityTaskFieldLabel = {\n    for: \"task-priority\",\n    'label-id': \"task-priority-label\",\n    'label-text': \"Priority:\" \n}\n\n\nconst priorityTaskField = {\n    input1: {\n        type: \"radio\",\n        name: \"priority\",\n        id: \"high\",\n        value: \"high\",\n        for: \"high\",\n        'label-text': \"High\",\n        class: \"priority\",\n        'data-color': \"red\",\n    },\n    input2: {\n        type: \"radio\",\n        name: \"priority\",\n        id: \"medium\",\n        value: \"medium\",\n        for: \"medium\",\n        'label-text': \"Medium\",\n        class: \"priority\",\n        'data-color': \"yellow\",\n\n    },\n    input3: {\n        type: \"radio\",\n        name: \"priority\",\n        id: \"low\",\n        value: \"low\",\n        for: \"low\",\n        'label-text': \"Low\",\n        class: \"priority\",\n        'data-color': \"green\",\n\n    }\n}\n\n\nconst statusTaskField = {\n        class: \"status-field\",\n        for: \"status-dropdown\",\n        'label-id': \"task-status-label\",\n        'label-text': \"Status:\",\n        name: \"status\",\n        'select-id': \"status-dropdown\", \n        options: [\n            {\n                value: \" \",\n                text: \" \"\n            },\n            {\n                value: \"Not Started\",\n                text: \"Not Started\"\n            },\n            {\n                value: \"In Progress\",\n                text: \"In Progress\",\n            },\n            {\n                value: \"Complete\",\n                text: \"Complete\"\n            }\n        ]\n}\n\n\n\n\n\n//# sourceURL=webpack://todo-list/./src/config.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config.js */ \"./src/config.js\");\n/* harmony import */ var _page_load2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./page_load2.js */ \"./src/page_load2.js\");\n\n\n\n\nlet projectMapping = (0,_page_load2_js__WEBPACK_IMPORTED_MODULE_1__.loadDataFromLocalStorage)('projectMapping');\n\n// selects the only div element in index.html\nlet pageInfo = document.querySelector('div');\n\n// assigns the div an id of content\npageInfo.id = 'content';\n\n/* DATE \n   creates an element for a localized date string that was converted from a Date object, and appends it to the 'content' div */\nconst processedDate = (0,_page_load2_js__WEBPACK_IMPORTED_MODULE_1__.prepareAndCreateDate)();\n(0,_page_load2_js__WEBPACK_IMPORTED_MODULE_1__.appendDate)(processedDate, pageInfo);\n\n/* LEFT PANE TITLE AND RIGHT PANE TITLE (RIGHT PANE TITLE IS INITIALLY HIDDEN)\n   creates elements for two processed titles data that is in an array and appends them to the 'content' div */\nconst processedTitles = (0,_page_load2_js__WEBPACK_IMPORTED_MODULE_1__.prepareAndCreateObjectData)(_config_js__WEBPACK_IMPORTED_MODULE_0__.titles, _page_load2_js__WEBPACK_IMPORTED_MODULE_1__.prepareAndCreateTitleData);\n(0,_page_load2_js__WEBPACK_IMPORTED_MODULE_1__.appendTitles)(processedTitles, pageInfo);\n\n/* NEW PROJECT, NEW TASK, AND SAVE BUTTONS (SAVE BUTTON IS INITIALLY HIDDEN)ß\n   creates elements for processed buttons data and appends them to the 'content' div */\nlet processedButtons = (0,_page_load2_js__WEBPACK_IMPORTED_MODULE_1__.prepareAndCreateObjectData)(_config_js__WEBPACK_IMPORTED_MODULE_0__.buttons, _page_load2_js__WEBPACK_IMPORTED_MODULE_1__.prepareAndCreateButtonData);\n(0,_page_load2_js__WEBPACK_IMPORTED_MODULE_1__.appendButtons)(processedButtons, pageInfo);\n\n// PROJECTS LIST AND NEW PROJECT FIELD ON LEFT PANE\n(0,_page_load2_js__WEBPACK_IMPORTED_MODULE_1__.appendProjectsListAndField)(_config_js__WEBPACK_IMPORTED_MODULE_0__.projectsListAttributes, _config_js__WEBPACK_IMPORTED_MODULE_0__.newProjectFieldAttributes, pageInfo);\n\n// TASKS TITLE AND LIST ON MIDDLE PANE\n(0,_page_load2_js__WEBPACK_IMPORTED_MODULE_1__.appendTasksTitleAndList)(projectMapping['Project1'], pageInfo);\n\nconst processedThreeTaskFields = (0,_page_load2_js__WEBPACK_IMPORTED_MODULE_1__.prepareAndCreateObjectData)(_config_js__WEBPACK_IMPORTED_MODULE_0__.firstThreeTaskFields, _page_load2_js__WEBPACK_IMPORTED_MODULE_1__.prepareAndCreateThreeTaskFieldsData);\nconst processedPriorityTaskField = (0,_page_load2_js__WEBPACK_IMPORTED_MODULE_1__.prepareAndCreateObjectData)(_config_js__WEBPACK_IMPORTED_MODULE_0__.priorityTaskField, _page_load2_js__WEBPACK_IMPORTED_MODULE_1__.prepareAndCreatePriorityTaskFieldData)\n;(0,_page_load2_js__WEBPACK_IMPORTED_MODULE_1__.appendTaskFields)(processedThreeTaskFields, _config_js__WEBPACK_IMPORTED_MODULE_0__.priorityTaskFieldLabel, processedPriorityTaskField, pageInfo);\n\n(0,_page_load2_js__WEBPACK_IMPORTED_MODULE_1__.appendStatusTaskField)(_config_js__WEBPACK_IMPORTED_MODULE_0__.statusTaskField);\n\n/* ADDS EVENT LISTENER TO EACH PROJECT NAME AND CHANGES TASKS TITLE AND LIST ON MIDDLE PANE */\n(0,_page_load2_js__WEBPACK_IMPORTED_MODULE_1__.selectProject)(pageInfo);\n\n/* CURRENT ISSUES: \n    NEED DELETE BUTTON FOR PROJECTS AND DELETE BUTTON FOR TASKs\n*/\n\n\n//# sourceURL=webpack://todo-list/./src/index.js?");

/***/ }),

/***/ "./src/page_load2.js":
/*!***************************!*\
  !*** ./src/page_load2.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appendButtons: () => (/* binding */ appendButtons),\n/* harmony export */   appendDate: () => (/* binding */ appendDate),\n/* harmony export */   appendProjectsListAndField: () => (/* binding */ appendProjectsListAndField),\n/* harmony export */   appendStatusTaskField: () => (/* binding */ appendStatusTaskField),\n/* harmony export */   appendTaskFields: () => (/* binding */ appendTaskFields),\n/* harmony export */   appendTasksTitleAndList: () => (/* binding */ appendTasksTitleAndList),\n/* harmony export */   appendTitles: () => (/* binding */ appendTitles),\n/* harmony export */   loadDataFromLocalStorage: () => (/* binding */ loadDataFromLocalStorage),\n/* harmony export */   prepareAndCreateButtonData: () => (/* binding */ prepareAndCreateButtonData),\n/* harmony export */   prepareAndCreateDate: () => (/* binding */ prepareAndCreateDate),\n/* harmony export */   prepareAndCreateObjectData: () => (/* binding */ prepareAndCreateObjectData),\n/* harmony export */   prepareAndCreatePriorityTaskFieldData: () => (/* binding */ prepareAndCreatePriorityTaskFieldData),\n/* harmony export */   prepareAndCreateThreeTaskFieldsData: () => (/* binding */ prepareAndCreateThreeTaskFieldsData),\n/* harmony export */   prepareAndCreateTitleData: () => (/* binding */ prepareAndCreateTitleData),\n/* harmony export */   selectProject: () => (/* binding */ selectProject)\n/* harmony export */ });\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config.js */ \"./src/config.js\");\n\n\nsaveDataToLocalStorage('projectsListText', _config_js__WEBPACK_IMPORTED_MODULE_0__.projectsListText);\n// saveDataToLocalStorage('projectMapping', projectMapping);\n\n\nlet currentProjectData = _config_js__WEBPACK_IMPORTED_MODULE_0__.projectMapping['Project1'];\n\nlet isEditingTask = false;\nlet editingTaskId = null;\n\n\n/* saves project items and tasks to localStorage every time new data is created or updated\n   key is a string representing the name of the storage slot and data is the data to be stored which can be of \n   any type that can be serialized to JSON */\nfunction saveDataToLocalStorage(key, data) {\n\n    // *localStorage can only store strings\n    localStorage.setItem(key, JSON.stringify(data));\n}\n\n\n/* checks for existing project items and tasks in localStorage when the application is first loaded\n   retrieves and parses the stored data into a JavaScript object */\nfunction loadDataFromLocalStorage(key) {\n\n    /* retrieves data stored in localStorage under the key; result is a JSON string or null if there is no data\n       for the given key */\n    const storedData = localStorage.getItem(key);\n\n    // checks if storedData is truthy\n    if (storedData) {\n\n        // parses the JSON string back into a JavaScript object or array\n        return JSON.parse(storedData);\n    }\n\n    // if storedData is null, function returns an empty object\n    return {};\n}\n\n\n/* returns a localized date string that was converted from a Date object, formatted to a specific locale and options */\nfunction prepareAndCreateDate() {\n    return new Date().toLocaleDateString('en-US', { \n        day: 'numeric', \n        month: 'short', \n        year: 'numeric', \n        weekday: 'long' \n    });\n}\n\n\n/* utility function that creates HTML elements \n   rest parameter allows for an indefinite number of arguments representing child elements \n        the rest parameter arguments get treated as an array inside the function */\nfunction createElement(type, properties, ...children) {\n\n    // type is the type of HTML element to be created\n    const element = document.createElement(type);\n        \n    // properties is an object containing key-value pairs where values are property values to be set on the HTML element\n    for (const key in properties) {\n\n        /* for each key, set the corresponding property value on the element ex. if properties is {id: myElement, className: myClass}, \n           element will have its id set to myElement and its className set to myClass */\n        element[key] = properties[key];\n    }\n        \n    // iterates over the children array, and for each child, appends the child to the parent element \n    children.forEach(child => element.appendChild(child));\n        \n    return element;\n}\n\n\n// creates an element for Date string and appends it to the page container; createAndAppendDate(processedData, pageInfo)\nfunction appendDate(dateData, container) {\n\n    // creates a date div and sets its classes and text content \n    const dateDiv = createElement('div', {\n        className: \"section date middle\",\n        textContent: dateData\n    });\n    \n    // appends the date div to the page\n    container.appendChild(dateDiv);\n}\n\n\n/* takes in a data object made up of key-value pairs, prepareFunction processes it and pushes the processed data into an array */\nfunction prepareAndCreateObjectData(obj, prepareAndCreateFunction) {\n\n    const processedData = [];\n\n    // iterates over each key in obj\n    for (const key in obj) {\n\n        // item is assigned the value of the current property being iterated over\n        const item = obj[key];\n\n        // calls prepareFunction, passing it the current key and its value, and pushes the result of the prepareFunction into the processedData array\n        processedData.push(prepareAndCreateFunction(key, item));\n    }\n    return processedData;\n}\n\n\n// a prepareData function that processes the title object and returns the processed data; prepareObjectData(titles, prepareTitleData) \nfunction prepareAndCreateTitleData(key, item) {\n    return {\n    \n        /* processes the key-value pairs of a title object and then returns them, sets object's classes property, \n           sets the src property for an image associated with the current value, sets the image's alt property, sets text content, sets a class for the text */\n        classes: [\"section\", key, item.position],\n        imageSrc: item.image,\n        imageAlt: item.alt,\n        textContent: item.text,\n        textClass: item['text-class'],\n    };     \n}\n\n\n// creates elements for the processed titles data and appends them to the page container; createAndAppendTitles(processedTitles, pageInfo)\nfunction appendTitles(titlesData, container) {\n\n    /* iterates over an array of processed title data/objects, each object includes the \n       title's classes, title's image data, alt text data, and text content */\n    titlesData.forEach(data => {\n\n        /*  for each processed object in the array (projects-title or each-task-title)\n            creates a div element, and sets its classes by joining all class names \n           provided in data.classes with a space between the classes */\n        const titleDiv = createElement('div', {\n            className: data.classes.join(' ')\n        });\n\n        // creates an img element, and sets its src and alt attributes according to the processed object \n        const img = createElement('img', {\n            src: data.imageSrc, \n            alt: data.imageAlt\n        });\n\n        /* if data.textClass exists (if textClass is a key in the processed object), uses that value as text content,\n           otherwise, defaults to an empty string as text content */\n        data.textClass ? `${data.textClass}` : '';\n\n        // creates a div for the text content and sets the div's classes and text content \n        const textDiv = createElement('div', {\n            textContent: data.textContent\n        });\n\n        // append img and text content div elements to their container, titleDiv \n        titleDiv.appendChild(img);\n        titleDiv.appendChild(textDiv);\n\n        container.appendChild(titleDiv);\n    });\n}\n\n\n// a prepareData function that processes the buttons object and returns the processed data\nfunction prepareAndCreateButtonData(key, item) {\n\n    return {\n\n        /* takes the current key and its value of a button object and processes it \n            sets/processes new key-value pairs and then returns them\n            sets classes property for the object, sets its id property, sets its text content */\n        classes: [\"section\", key, item.position],\n        id: item.id,\n        textContent: item.text\n    };\n}\n\n\n// creates elements for the processed buttons data and appends them to the page container; createAndAppendButtons(processedButtons, pageInfo)\nfunction appendButtons(buttonsData, container) {\n\n    /* iterates over an array of button objects, each object includes the button's id and text content, \n       and for the div the button is nested into, its classes */\n    buttonsData.forEach(data => { \n\n        // creates a button element and sets its id attribute and text content \n        const button = createElement('button', {\n            id: data.id,\n            textContent: data.textContent\n        });\n\n        /* creates a div container for the button, and sets its classes by joining all class names \n           provided in data.classes with a space between them */\n        const buttonDiv = createElement('div', {\n            className: data.classes.join(' ')\n        });\n\n        // appends the button to its container, buttonDiv\n        buttonDiv.appendChild(button);\n\n        container.appendChild(buttonDiv);\n    });\n\n    // newTaskButton is assigned to the element whose id is 'new-task'\n    let newTaskButton = document.getElementById('new-task');\n\n    // adds a click event listener to newTaskButton, and runs the createNewTask function when the button is clicked\n    newTaskButton.addEventListener('click', newTask);\n\n    // saveTaskButton is assigned to the element whose id is 'save-task'\n    let saveTaskButton = document.getElementById(\"save-task\");\n    \n    // adds a click event listener to saveTaskButton, and runs the createAndAppendTask function when the button is clicked \n    saveTaskButton.addEventListener('click', () => {\n\n        appendTask(currentProjectData, container);\n\n    });\n}\n\n\n/* creates li elements for projectsListText data and appends them with their attributes\n   key is the unique identifier for the project; projectsListText is the object containing project names keyed\n   by their unique identifiers; list is the DOM element to which the project list item will be appended; listAttributesData\n   is the object containing data for setting attributes on the list item's  child elements, like an image */\nfunction appendProjectsList(key, list, listAttributesData) {\n\n    let projectsListText = loadDataFromLocalStorage('projectsListText');\n\n    // fetches the project name using the key from the projectsListText\n    const projectName = projectsListText[key];\n\n    // saveDataToLocalStorage('projectsListText', projectsListText);\n    \n    // creates and configures the arrow pointing right image, the icon associated with each project\n    let img = createElement('img');\n    img.src = listAttributesData.image;\n    img.alt = listAttributesData.alt;\n\n    // creates a text node with projectName as text content\n    let textNode = document.createTextNode(projectName);\n\n    // creates li element and appends img element and text node as children\n    let projectDiv = createElement('li', { className: key }, img, textNode); \n\n    // appends the newly created li element to the ul element\n    list.appendChild(projectDiv);\n}\n\n// creates projectData based on user input\nfunction prepareAndCreateProjectData(input, listAttributesData) {\n\n    // checks if user input is empty\n    if (!input.value.trim()) return null;\n\n    // assigns a cleaned string to projectName\n    const projectName = input.value.trim();\n\n    let projectsListText = loadDataFromLocalStorage('projectsListText');\n\n    // generates a unique key for projectsListText for the new project by incrementing the total count of existing projects\n    const nextKey = `p${Object.keys(projectsListText).length + 1}`;\n\n    let projectMapping = loadDataFromLocalStorage('projectMapping');\n\n    // generates a unique key for projectMapping similar to nextKey\n    const newProjectKey = `Project${Object.keys(projectMapping).length + 1}`;\n\n    // adds the new project name to projectsListText using nextKey\n    projectsListText[nextKey] = projectName;\n\n    saveDataToLocalStorage('projectsListText', projectsListText);\n\n    /* creates a new project object with detailed information (position, image, alt text, project name) and\n       adds it to projectMapping using newProjectKey */\n    projectMapping[newProjectKey] = {\n        'Project': {\n            position: \"middle\",\n            image: listAttributesData.image,\n            alt: listAttributesData.alt,\n            text: projectName,\n        },\n    };\n\n    // persists the updated projectMapping to local storage to ensure data is saved across sessions\n    saveDataToLocalStorage('projectMapping', projectMapping);\n\n    // returns an object containing the new project's data, ready for DOM manipulation\n    return {\n        projectName,\n        nextKey,\n        image: listAttributesData.image,\n        alt: listAttributesData.alt \n    };\n}\n\n\n// data function\nfunction deleteTask(projectData, editingTaskId, container) {\n\n    if (editingTaskId !== null) {\n        delete projectData[editingTaskId];\n\n        editingTaskId = null;\n\n        appendTasksTitleAndList(projectData, container);\n\n    } else {\n        alert(\"No task selected or task does not exist.\");\n    }\n\n    const stylesheet = document.getElementById('stylesheetToSwitch');\n    \n    if (stylesheet.href.endsWith('style.css')) {\n        stylesheet.href = 'style2.css';\n    }\n\n    return projectData;\n\n    // saveDataToLocalStorage('projectData', projectData);\n    // saveDataToLocalStorage('projectData', projectMapping);\n}\n\n\n// manipulates the DOM using the project data created by prepareAndCreateProjectData\nfunction appendProjectData(projectData, list) {\n\n    // checks if projectData exists\n    if (!projectData) return;\n     \n    // destructures the projectData object to extract necessary details for DOM elements\n    const { projectName, nextKey, image, alt } = projectData; \n\n    // creates an img element for the project and sets its src and alt attributes\n    const imgElement = document.createElement('img');\n    imgElement.src = image;\n    imgElement.alt = alt;\n\n    // creates a text node for the project name\n    const textNode = document.createTextNode(projectName);\n\n    // creates a list item li and assigns it to a class with the project's unique key\n    const listItem = document.createElement('li');\n    listItem.className = nextKey;\n\n    // appends the image element and text node as its children\n    listItem.appendChild(imgElement);\n    listItem.appendChild(textNode);\n\n    // appends the newly created list item to the provided list\n    list.appendChild(listItem);\n}\n\n\n// ties project data creation and project data DOM manipulation steps\nfunction appendNewProjectToList(input, list, listAttributesData, container) {\n\n    // creates the new project's data based on the user's input\n    const projectData = prepareAndCreateProjectData(input, listAttributesData);\n\n    // adds the created project data to the DOM, visualizing the new project in the list\n    appendProjectData(projectData, list);\n\n    // checks if project data was successfully created and added\n    if (projectData) {\n\n        // potentially update any relevant functionalities tied to the new project\n        selectProject(container);\n    } else {\n\n        // if input was empty, sets the input field's placeholder to prompt the user for a project name\n        alert(\"Enter new project name.\");\n    }\n\n    // clears input field after processing to prepare for the next input\n    input.value = '';\n}\n\n\n// creates elements for the projects list and the new-project field\nfunction appendProjectsListAndField(listAttributesData, fieldAttributesData, container) {\n\n    // creates a div container for the projects list and sets its classes\n    const listDiv = createElement('div', { \n        className: \"section projects-list left\" \n    });\n\n    // creates a ul element for the projects list\n    const list = createElement('ul');\n\n    let projectListText = loadDataFromLocalStorage('projectsListText');\n\n    let projectMapping = loadDataFromLocalStorage('projectMapping');\n\n    Object.keys(projectMapping).forEach(projectKey => {\n        const projectIndex = projectKey.replace('Project', '');\n        const projectTextKey = `p${projectIndex}`;\n        if (!_config_js__WEBPACK_IMPORTED_MODULE_0__.projectsListText.hasOwnProperty(projectTextKey)) {\n            const projectName = projectMapping[projectKey].Project.text;\n            _config_js__WEBPACK_IMPORTED_MODULE_0__.projectsListText[projectTextKey] = projectName;\n            saveDataToLocalStorage('projectsListText', _config_js__WEBPACK_IMPORTED_MODULE_0__.projectsListText);\n        }\n    })\n\n    projectListText = loadDataFromLocalStorage('projectsListText');\n\n    // loops through projectsListText and calls appendProjectsList on each project/key to populate the projects list\n    for (const key in _config_js__WEBPACK_IMPORTED_MODULE_0__.projectsListText) {\n        appendProjectsList(key, list, listAttributesData);\n    }\n    \n    // append the projects list to its container\n    listDiv.appendChild(list);\n\n    // creates a container for the input field\n    const projectFieldDiv = createElement('div');\n\n    // creates a label element for the input field and sets its for attribute\n    const label = createElement('label', { \n        htmlFor: fieldAttributesData.for \n    });\n\n    // creates the input field with type, id, and placeholder attributes from fieldAttributesData key values\n    const input = createElement('input', {\n        type: fieldAttributesData.type,\n        id: fieldAttributesData.id,\n        placeholder: fieldAttributesData.placeholder\n    });\n\n    // appends the label and input to the input field container\n    projectFieldDiv.appendChild(label);\n    projectFieldDiv.appendChild(input);\n\n    // appends the input field container to the projects list container\n    listDiv.appendChild(projectFieldDiv);\n\n    // appends the list container to the page container\n    container.appendChild(listDiv);\n\n    /* adds a click event listener to the + New Project button that calls appendNewProjectName \n        when the + New Project button clicked */\n    document.getElementById(\"new-project\").addEventListener('click', function() {\n\n        // adds the new project name to the projects list when the button is clicked\n        appendNewProjectToList(input, list, listAttributesData, container);\n    });\n\n    // adds a keyup event listener to the input field to call appendNewProjectName when the Enter key is hit\n    input.addEventListener('keyup', function (event) {\n\n        if (event.key === 'Enter') {\n            appendNewProjectToList(input, list, listAttributesData, container);\n        }\n    });\n}\n    \n\n// creates elements for the tasks project title and tasks list \nfunction appendTasksTitleAndList(projectData, container) {\n\n    // clears any existing tasks list div before creating a new one\n    const existingTasksListDiv = container.querySelector('.tasks-list');\n\n    if (existingTasksListDiv) {\n\n        // removes the existing tasks list div from the DOM\n        existingTasksListDiv.remove();\n\n        // creates and appends a new div element and adds the middle class back to it\n        const clearedTasksListDiv = document.createElement('div');\n        clearedTasksListDiv.classList.add('middle');\n        container.appendChild(clearedTasksListDiv);\n    } \n\n    // projectData = loadDataFromLocalStorage('projectData');\n\n    // assigns tasksTitleData to the value/object associated with projectData['Project'] key\n    const tasksTitleData = projectData['Project'];\n\n    // creates a div for the title and sets it classes\n    const titleDiv = createElement('div', {\n        className: \"section project-title tasks-list-project \" + tasksTitleData.position\n    });\n\n    // creates img element of the folder plus down-pointing arrow icon and sets its src and alt attributes \n    const img = createElement('img', {\n        src: tasksTitleData.image, \n        alt: tasksTitleData.alt\n    });\n\n    // creates div for the title's text content and sets the div's id\n    const textDiv = createElement('div', {\n        textContent: tasksTitleData.text\n    });\n\n    // appends the img and text div elements to their title container\n    titleDiv.appendChild(img);\n    titleDiv.appendChild(textDiv);\n\n    container.appendChild(titleDiv);\n\n    // creates a div container for all the tasks in the list\n    const tasksListDiv = createElement('div', {\n        className: 'section tasks-list middle'\n    });\n\n    // iterates through keys/objects inside the projectData object\n    for (let taskKey in projectData) {\n\n        // move on if the key is Project (which contains properties for the title)\n        if (taskKey === 'Project') continue;\n\n        // data assigned to the value/object associated with projectData[taskKey]\n        let data = projectData[taskKey];\n\n        /* creates a div container for \"Edit\", task title, \"Task Description\", \"Task Due Date\", \n        \"Priority Level\", and \"Status\" elements and sets its class and id */\n        let taskDiv = createElement('div', {\n            className: 'task',\n            id: taskKey\n        });\n\n        // creates a div for \"Edit\" and sets its class and text content\n        let taskEditDiv = createElement('div', {\n            className: \"task-edit\",\n            textContent: data[\"task-edit\"]\n        });\n\n        // adds a click event listener to the Edit div element\n        taskEditDiv.addEventListener('click', function() {\n            \n            // when Edit is clicked, run populateFormFields to populate the task form fields with values from the object\n            isEditingTask = true;\n            editingTaskId = this.parentElement.getAttribute('id');\n            \n            switchStylesheet();\n            \n            populateFormFields(projectData, editingTaskId);\n\n            let deleteTaskButton = document.getElementById('delete-task');\n\n            deleteTaskButton.addEventListener('click', () => {\n                projectData = deleteTask(projectData, editingTaskId, container);\n\n                saveDataToLocalStorage('projectData', projectData);\n\n                const projectName = projectData.Project.text;\n                const formattedProjectName = projectName.replace(' ', '');\n                _config_js__WEBPACK_IMPORTED_MODULE_0__.projectMapping[formattedProjectName] = projectData;\n\n                saveDataToLocalStorage('projectMapping', _config_js__WEBPACK_IMPORTED_MODULE_0__.projectMapping);\n            });\n        });\n\n        // creates a div for the task title key's value and sets its class and text content\n        let taskTitleDiv = createElement('div', {\n            className: \"task-title\",\n            textContent: data[\"task-title\"]\n        })\n\n        // creates a div for \"Task Description\" and sets its class and text content\n        let taskDescriptionDiv = createElement('div', {\n            className: \"task-description\",\n            textContent: data[\"task-description\"]\n        });\n\n        /* creates a div for \"Task Due Date\" and sets its text content and \n            sets its color class based on the value of its priority-level property */\n        let taskDueDateDiv = createElement('div', {\n\n        /* if the priority-level is high, set its color class to red \n           if the priority-level is medium, set its color class to yellow\n           if the priority-level is low, set its color class to green */\n            className: `task-duedate ${data[\"priority-level\"] === \"high\" ? \"red\" : data[\"priority-level\"] === \"medium\" ? \"yellow\" : \"green\"}`,\n            textContent: data[\"task-duedate\"]\n        });\n\n        // creates a div for \"Priority Level\", and sets its text content and classes, including the hide class\n        let priorityLevelDiv = createElement('div', {\n            className: `priority-level hide`,\n            textContent: data[\"priority-level\"]\n        });\n\n        // creates a div for \"Status\" and sets its text content and classes, including the hide class\n        let statusDiv = createElement('div', {\n            className: `status hide`,\n            textContent: data[\"status\"]\n        });\n\n        // appends 4 shown elements and 2 hidden elements to the task container\n        taskDiv.appendChild(taskEditDiv);\n        taskDiv.appendChild(taskTitleDiv);\n        taskDiv.appendChild(taskDescriptionDiv);\n        taskDiv.appendChild(taskDueDateDiv);\n        taskDiv.appendChild(priorityLevelDiv);\n        taskDiv.appendChild(statusDiv);\n\n        // appends the task container to the div container with the tasks list\n        tasksListDiv.appendChild(taskDiv);\n\n        container.appendChild(tasksListDiv);\n        }\n}\n\n\n// a prepareData function that processes the firstThreeTaskFields data and returns the processed data\nfunction prepareAndCreateThreeTaskFieldsData(key, item) {\n    return {\n            class: key,\n            labelFor: item.for,\n            labelId: item[\"label-id\"],\n            labelTextContent: item[\"label-text\"],\n            inputType: item.type,\n            textareaName: item.name,\n            inputId: item[\"input-id\"],\n            textareaId: item[\"textarea-id\"]\n    };\n}\n\n\n// a prepareData function that processes the priorityTaskField data and returns the processed data\nfunction prepareAndCreatePriorityTaskFieldData(key, item) {\n    return {\n            type: item.type,\n            name: item.name,\n            id: item.id,\n            value: item.value,\n            for: item.for,\n            \"label-text\": item[\"label-text\"],\n            class: item.class,\n            \"data-color\": item[\"data-color\"]\n    };\n}\n\n\n// creates and appends four task fields and a label for the fourth field to the page container\nfunction appendTaskFields(threeTaskFieldsData, fieldLabel, priorityTaskFieldData, container) {\n\n    // creates a form container and sets its classes\n    const formDiv = createElement('div', {\n        className: 'section task-details right'\n    });\n\n    // creates a form and sets its attributes\n    const form = createElement('form', {\n        action: '', \n        method: 'post', \n        id: 'form'\n    });\n\n    // iterates through each object in the firstThreeTaskFields array object\n    threeTaskFieldsData.forEach(data => {\n\n        // for each object, create a label and set its attributes and text content\n        const label = createElement('label', {\n            htmlFor: data.labelFor,\n            id: data.labelId,\n            textContent: data.labelTextContent\n        });\n\n        // for each object, creates a task field div container and set its class\n        const taskFieldDiv = createElement('div', {\n            className: data.class\n        });\n\n        // appends each label to each task field div\n        taskFieldDiv.appendChild(label);\n\n        // if the object has a key of inputType, creates an input element and sets its attributes \n        if (data.inputType) {\n            const input = createElement('input', {\n                type: data.inputType, \n                id: data.inputId\n            });\n            // appends the input element to its task field div container\n            taskFieldDiv.appendChild(input);\n        }\n\n        // if the object has a key of textareaName, creates a textarea element and set its attributes \n        if (data.textareaName) {\n            const textarea = createElement('textarea', {\n                name: data.textareaName, \n                id: data.textareaId\n            });\n            // appends the textarea to its task field div container\n            taskFieldDiv.appendChild(textarea);\n        }\n        // appends each task field div to the form element\n        form.appendChild(taskFieldDiv);\n    });\n\n    // creates main label element with \"Priority\" as text content \n    const priorityTaskFieldLabel = createElement('label', {\n        htmlFor: fieldLabel.for,\n        id: fieldLabel[\"label-id\"],\n        textContent: fieldLabel[\"label-text\"]\n    });\n\n    // creates div container for the Priority main label, input, and input label elements\n    const priorityTaskFieldDiv = createElement('div', {\n        className: 'priority-field'\n    });\n\n    // appends main label to the div container\n    priorityTaskFieldDiv.appendChild(priorityTaskFieldLabel);\n\n    /* iterates through the priorityTaskFieldData object array, and for each object, \n        creates an input element and set its attributes */\n    priorityTaskFieldData.forEach(data => {\n        const input = createElement('input', {\n            type: data.type,\n            name: data.name, \n            id: data.id,\n            value: data.value\n        });\n\n        // for each object, creates an input label element and set its attributes\n        const otherLabel = createElement('label', {\n            htmlFor: data.for,\n            className: data.class,\n            textContent: data[\"label-text\"]\n        });\n\n        // for each input label, sets the color for each radio \n        otherLabel.dataset.color = data[\"data-color\"];\n\n        // appends each radio input to the div container\n        priorityTaskFieldDiv.appendChild(input);\n        // appends each otherLabel to the div container\n        priorityTaskFieldDiv.appendChild(otherLabel);\n    });\n\n    // appends the div container to the form element\n    form.appendChild(priorityTaskFieldDiv);\n\n    // appends the form element to the form container\n    formDiv.appendChild(form);\n\n    // appends the form container to the page container\n    container.appendChild(formDiv);\n}\n\n\n// creates and appends the status dropdown field to the page container\nfunction appendStatusTaskField(statusTaskFieldData) {\n\n    // returns the form element\n    const form = document.getElementById(\"form\");\n\n    // iterates through the array keyed to \"options\" in the statusTaskFieldData object\n    const optionsElements = statusTaskFieldData.options.map(option => \n\n        // for each element in the options array, creates an option element and sets its attributes\n        createElement('option', {\n            value: option.value, \n            textContent: option.text\n        })\n    );\n\n    // creates a select element and sets its attributes and options\n    const select = createElement('select', {\n        name: statusTaskFieldData.name, \n        id: statusTaskFieldData[\"select-id\"]}, \n        ...optionsElements);\n\n    // creates a label element and sets its attributes\n    const label = createElement('label', {\n        htmlFor: statusTaskFieldData.for,\n        id: statusTaskFieldData[\"label-id\"],\n        textContent: statusTaskFieldData[\"label-text\"]\n    });\n\n    // creates a div container for the select (with its options) and label elements \n    const statusTaskFieldDiv = createElement('div', {className: statusTaskFieldData.class}, label, select);\n\n    // appends the status dropdown div container to the page container\n    form.appendChild(statusTaskFieldDiv);\n}\n\n\n// switches from two panes to three panes \nfunction switchStylesheet() {\n    const stylesheet = document.getElementById('stylesheetToSwitch');\n\n    if (stylesheet.href.endsWith('style2.css')) {\n        stylesheet.href = 'style.css';\n    }\n} \n\n\n// populates the form fields with the data for the task selected\nfunction populateFormFields(projectData, taskId) {\n    let taskData = projectData[taskId];\n\n    let taskTitle = taskData[\"task-title\"];\n\n    let taskDescription = taskData['task-description'];\n\n    let taskDueDate = taskData['task-duedate'];\n\n    if (taskDueDate.includes('/')) {\n        \n        //splits the taskDueDate string into an array of substrings based on \"/\" as the delimiter\n        const dateParts = taskDueDate.split('/');\n        \n        /* regex for the third substring, YYYY, then \"-\", then the first substring, MM, padded with a '0'\n           if MM is a single digit, then \"-\", and lastly the second substring, DD, padded with a '0'\n           if DD is a single digit */\n        taskDueDate = `${dateParts[2]}-${dateParts[0].padStart(2, '0')}-${dateParts[1].padStart(2, '0')}`;\n    }\n\n    let taskPriority = taskData['priority-level'];\n\n    let taskStatus = taskData['status'];\n\n    // returns the field element with the id of \"each-task\" in the right pane\n    const eachTaskField = document.getElementById('each-task');\n\n    // returns the field element with the id of \"task-description\" in the right pane\n    const descriptionField = document.getElementById('task-description');\n\n    // returns the field element with the id of \"task-duedate\" in the right pane\n    const dueDateField = document.getElementById('task-duedate');\n\n    // returns the field element with the name of \"priority\"  in the right pane\n    const priorityFields = document.getElementsByName('priority');\n\n    // assigns the value of taskTitle in the middle pane to eachTaskField in the right pane\n    eachTaskField.value = taskTitle;\n\n    // assigns the value of taskDescription in the middle pane to descriptionField in the right pane\n    descriptionField.value = taskDescription;\n\n    // assigns the value of taskDueDate in the middle pane to dueDateField in the right pane\n    dueDateField.value = taskDueDate;\n\n    // loop through the three priority fields\n    for (let i = 0; i < priorityFields.length; i++) {\n        \n        /* if the priority field value exactly matches the text content of the \"priority-level\" element,\n            check off that priority field value and break from this loop */\n        if (priorityFields[i].value === taskPriority) {\n            priorityFields[i].checked = true;\n            break;\n        }\n    }\n\n    // returns the element with the id of \"status-dropdown\" in the right pane\n    const statusSelect = document.getElementById('status-dropdown');\n\n    // assigns the value of taskStatus in the middle pane to statusSelect in the right pane\n    statusSelect.value = taskStatus;\n\n}\n\n\n// creates a new task in the DOM\nfunction newTask() {\n    isEditingTask = false;\n    editingTaskId = null;\n\n    // switches from two panes to three panes\n    switchStylesheet();\n\n    // returns all the task fields and makes their values empty strings \n    let eachTaskField = document.getElementById('each-task');\n\n    if (eachTaskField) {\n        eachTaskField.value = '';\n    }\n\n    let dueDateField = document.getElementById('task-duedate');\n\n    if (dueDateField) {\n        dueDateField.value = '';\n    }\n\n    let descriptionField = document.getElementById('task-description');\n\n    if (descriptionField) {\n        descriptionField.value = '';\n    }\n\n    let priorityFields = document.getElementsByName('priority');\n\n    for (let i = 0; i < priorityFields.length; i++) {\n        priorityFields[i].checked = false;\n    }\n\n    // returns the status dropdown and makes its selected index the first option which is blank\n    let statusSelect = document.getElementById('status-dropdown');\n\n    if (statusSelect) {\n        statusSelect.selectedIndex = 0;\n    }\n}\n\n\n// creates the middle pane for a selected project; updates the displayed content accordingly\nfunction selectProject(container) {\n\n    let projectsListText = loadDataFromLocalStorage('projectsListText');\n    let projectMapping = loadDataFromLocalStorage('projectMapping');\n\n    // get an array of keys from the projectsListText object, then iterates over these keys\n    Object.keys(projectsListText).forEach(key => {\n    \n        // extracts the numeric part of the key by removing the first character \"p\"\n        const projectIndex = key.substring(1);\n\n        // tries to find a clickable DOM element with a class matching the current key (.p1, .p2, etc.)\n        const projectTitleDiv = document.querySelector(`.${key}`);\n\n        // checks if the projectTitleDiv was successfully found\n        if (projectTitleDiv) {\n\n            // adds an event listener to the projectTitleDiv that triggers a function when the element is clicked\n            projectTitleDiv.addEventListener('click', () => {\n\n                // retrieves the DOM element with the id 'stylesheetToSwitch'\n                let stylesheet = document.getElementById('stylesheetToSwitch');\n\n                // switches the page's layout/styling to reflect that a project has been selected \n                if (stylesheet.href.endsWith('style.css')) {\n                    stylesheet.href = 'style2.css';\n                }\n\n                /* if projectMapping is defined, uses projectIndex to retrieve the corresponding project's data\n                   from projectMapping \n                   if projectMapping is not defined or doesn't contain the key, it falls back to using the value from\n                   projectsListText[key] */\n                currentProjectData = projectMapping ? projectMapping[`Project${projectIndex}`] : projectsListText[key];\n\n                // creates the list of tasks associated with the selected project and appends it to the page\n                appendTasksTitleAndList(currentProjectData, container);\n            });\n        }\n    });\n}\n\n\n// gathers input data\nfunction gatherTaskInputs() {\n\n    // retrieves user inputs from their respective DOM elements, and returns an object containing all these values\n    return {\n    taskTitle: document.getElementById('each-task').value.trim(),\n    taskDueDate: document.getElementById('task-duedate').value.trim(),\n    taskDescription: document.getElementById('task-description').value.trim(),\n    taskStatus: document.getElementById('status-dropdown').value,\n    priorityLevel: document.querySelector('input[type=\"radio\"][name=\"priority\"]:checked') ? document.querySelector('input[type=\"radio\"][name=\"priority\"]:checked').nextElementSibling.textContent.trim().toLowerCase() : ''\n    };\n}\n\n\n// creates task data from inputs\nfunction prepareAndCreateTaskData(inputs) {\n\n    // checks if any of the fields are missing or blank\n    if (!inputs.taskTitle || !inputs.taskDueDate || !inputs.taskDescription || !inputs.taskStatus || !inputs.priorityLevel) {\n        alert(\"One or more inputs are blank or are not selected.\");\n        return;\n    }\n\n    // converts task due date into a Date object and formats it into a more readable string\n    const date = new Date(inputs.taskDueDate + 'T00:00:00');\n    const formattedDueDate = `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\n\n    // returns a new task object with keys matching a structured task data format\n    return {\n        'task-title': inputs.taskTitle,\n        'task-duedate': formattedDueDate,\n        'task-description': inputs.taskDescription,\n        'priority-level': inputs.priorityLevel,\n        'status': inputs.taskStatus,\n        'task-edit': \"Edit\",\n    };\n}\n\n\nfunction findLastTaskId(projectData) {\n    let lastId = 0;\n\n    Object.keys(projectData).forEach(key => {\n        const currentId = parseInt(key, 10);\n\n        if (!isNaN(currentId) && currentId > lastId) {\n            lastId = currentId;\n        }\n    });\n    return lastId;\n}\n\n\n// updates projectData structure\nfunction prepareAndCreateTaskInProjectData(projectData) {\n\n    // collect form input data\n    const inputs = gatherTaskInputs();\n\n    // creates a structured task object from these inputs\n    const taskData = prepareAndCreateTaskData(inputs);\n\n    if (taskData) {\n        // if editing an existing task\n        if (editingTaskId !== null) {\n\n            // updates the corresponding task in project data with the newly created task object\n            projectData[editingTaskId] = taskData;\n\n            saveDataToLocalStorage('projectData', projectData);\n\n        // if creating a new task\n        } else {\n\n            // generates a new task Id based on the current size of projectData and adds the task object to projectData using the new Id\n            const newTaskId = (Object.keys(projectData).length - 1).toString();\n            projectData[newTaskId] = taskData;\n\n            saveDataToLocalStorage('projectData', projectData);\n        }\n\n        const projectName = projectData.Project.text;\n        const formattedProjectName = projectName.replace(' ', '');\n        _config_js__WEBPACK_IMPORTED_MODULE_0__.projectMapping[formattedProjectName] = projectData;\n\n        saveDataToLocalStorage('projectMapping', _config_js__WEBPACK_IMPORTED_MODULE_0__.projectMapping);\n    }\n}\n\n\n// ties project data creation and project data DOM manipulation steps\nfunction appendTask(projectData, container) {\n\n    // retrieves a link element for a stylesheet \n    let stylesheet = document.getElementById('stylesheetToSwitch');\n\n    // checks if the current stylesheet has three panes\n    if (stylesheet.href.endsWith('style.css')) { \n\n        // updates projectData structure\n        prepareAndCreateTaskInProjectData(projectData);\n\n        // creates elements for the tasks project title and tasks list \n        appendTasksTitleAndList(projectData, container);\n\n        // saves project items and tasks to localStorage every time new data is created or updated\n        saveDataToLocalStorage('projectData', projectData);\n\n        saveDataToLocalStorage('projectMapping', _config_js__WEBPACK_IMPORTED_MODULE_0__.projectMapping);\n\n        // switches stylesheet back to having two panes\n        // stylesheet.href = 'style2.css';\n    }\n}\n\n\n\n\n//# sourceURL=webpack://todo-list/./src/page_load2.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;